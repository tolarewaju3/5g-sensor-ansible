/*
 Generated by org.infinispan.protostream.annotations.impl.processor.MarshallerSourceCodeGenerator
 for class codelikethewind.CallRecord
*/

package codelikethewind;

import codelikethewind.CallRecord;

/**
 * WARNING: Generated code! Do not edit!
 *
 * @private
 */
@javax.annotation.processing.Generated(
   value = "org.infinispan.protostream.annotations.impl.processor.AutoProtoSchemaBuilderAnnotationProcessor",
   comments = "Please do not edit this file!"
)
@SuppressWarnings("all")
public final class CallRecord$___Marshaller_a27cd5f3b31064fa8f2cd94e971f084d878259750915cc0580856c11c73b5fd6 extends org.infinispan.protostream.annotations.impl.GeneratedMarshallerBase implements org.infinispan.protostream.ProtobufTagMarshaller<codelikethewind.CallRecord> {

   @Override
   public Class<codelikethewind.CallRecord> getJavaClass() { return codelikethewind.CallRecord.class; }
   
   @Override
   public String getTypeName() { return "org.codelikethewind.CallRecord"; }
   
   @Override
   public codelikethewind.CallRecord read(org.infinispan.protostream.ProtobufTagMarshaller.ReadContext $1) throws java.io.IOException {
      final org.infinispan.protostream.TagReader $in = $1.getReader();
      final codelikethewind.CallRecord o = new codelikethewind.CallRecord();
      long __bits$0 = 0;
      boolean done = false;
      while (!done) {
         final int tag = $in.readTag();
         switch (tag) {
            case 0: {
               done = true;
               break;
            }
            case (1 << org.infinispan.protostream.descriptors.WireType.TAG_TYPE_NUM_BITS | org.infinispan.protostream.descriptors.WireType.WIRETYPE_VARINT): {
               int __v$1 = $in.readInt32();
               o.id = __v$1;
               __bits$0 |= 1L;
               break;
            }
            case (2 << org.infinispan.protostream.descriptors.WireType.TAG_TYPE_NUM_BITS | org.infinispan.protostream.descriptors.WireType.WIRETYPE_LENGTH_DELIMITED): {
               java.lang.String __v$2 = $in.readString();
               o.location = __v$2;
               break;
            }
            case (3 << org.infinispan.protostream.descriptors.WireType.TAG_TYPE_NUM_BITS | org.infinispan.protostream.descriptors.WireType.WIRETYPE_FIXED64): {
               java.util.Date __v$3 = new java.util.Date($in.readFixed64());
               o.timestamp = __v$3;
               break;
            }
            case (4 << org.infinispan.protostream.descriptors.WireType.TAG_TYPE_NUM_BITS | org.infinispan.protostream.descriptors.WireType.WIRETYPE_LENGTH_DELIMITED): {
               java.lang.String __v$4 = $in.readString();
               o.signalStrength = __v$4;
               break;
            }
            case (5 << org.infinispan.protostream.descriptors.WireType.TAG_TYPE_NUM_BITS | org.infinispan.protostream.descriptors.WireType.WIRETYPE_LENGTH_DELIMITED): {
               java.lang.String __v$5 = $in.readString();
               o.network = __v$5;
               break;
            }
            default: {
               if (!$in.skipField(tag)) done = true;
            }
         }
      }
      if ((__bits$0 & 1L) == 0) {
         o.id = 1;
      }
      return o;
   }
   
   @Override
   public void write(org.infinispan.protostream.ProtobufTagMarshaller.WriteContext $1, codelikethewind.CallRecord $2) throws java.io.IOException {
      final org.infinispan.protostream.TagWriter $out = $1.getWriter();
      final codelikethewind.CallRecord o = (codelikethewind.CallRecord) $2;
      {
         final int __v$1 = o.id;
         $out.writeInt32(1, __v$1);
      }
      {
         final java.lang.String __v$2 = o.location;
         if (__v$2 != null) $out.writeString(2, __v$2);
      }
      {
         final java.util.Date __v$3 = o.timestamp;
         if (__v$3 != null) $out.writeFixed64(3, __v$3.getTime());
      }
      {
         final java.lang.String __v$4 = o.signalStrength;
         if (__v$4 != null) $out.writeString(4, __v$4);
      }
      {
         final java.lang.String __v$5 = o.network;
         if (__v$5 != null) $out.writeString(5, __v$5);
      }
   }
}
